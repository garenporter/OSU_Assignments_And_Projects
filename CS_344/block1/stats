#!/bin/bash
trap "rm -f file$$; rm -f temp_line$$; exit 1" INT HUP TERM KILL #if one of the listed signals is received, then remove all temp files and exit with status 1

#Checking for correct number of arguments
#Also checking if a file is specified 
file_path="file$$" #assign a file to variable file_path

if [ "$#" = "1" ] #if there is only 1 arg, then we know the file needs to be read from stdin
  then
    cat > "$file_path"  
elif [ "$#" = "2" ]  #if there are two arguments, then file_path gets assigned the file specified in the command
  then
    file_path=$2
    if [[ ! -r $file_path ]] #if the specified file cannot be read, then output error/delete temp files/exit with status 1
    then
      echo -e "./stats: cannot read $file_path" 1>&2
       rm -f *$$

      exit 1
    fi
else #if there are more than 2 arguments, or less than 1 arguemnt, then ouput error/remove temp files/exit with status 1
  echo -e "Incorrect number of arguments\n ./stats {-rows|-cols} [file]" >&2
  rm -f *$$

  exit 1
fi

#Checking for correct -r and -c format

if [[ "$1" == -r* ]] #if first arguement starts with -r, then move on to computing rows
  then 
    echo "Average	Median" #print average/median seperated by a tab

#This loop is done for rows, and it finds the average and median of each row and prints them to the screen as they are found

    cat "$file_path" | while read line 

        do
        touch temp_line$$  #create an empty file, which will hold the current row's data, seperated by spaces
        sum=0  #variable to hold sum of numbers in a row
        count=0 #variable to hold the total number of numbers in a row
        for i in $line
            do
            temp=$i  #not neccessry, but stores current number in temp variable
            echo -n "$temp " >> temp_line$$ #place the current number in the temp_line file, with no trailing newline and a space after the number
            sum=`expr $sum + $i` #sum all of the numbers on the row
            count=`expr $count + 1` #count the numbers in the row
        done

        middle=`expr \( $count - 1 \) / 2` #calculate the position of the middle number
        middle=`expr $middle + 2 - \( $count % 2 \)` #finalize middle calculation, also round up
        median="$(cat temp_line$$ | tr -s ' ' '\n' | sort -n | tr -s '\n' ' ' |  cut -f $middle -d ' ')"   #grab the middle number and store it: tr all spaces to newlines, sort, translate 
                                                                                                         #newlines back into spaces, then cut out the middle field, with space as deliminiter
        average=$((($sum + ($count/2))/$count)) #calculate the average and store it in a variable: use truncating integer division to get correct rounding

        echo "$average	$median" #print the average and median, seperated by a tab
        
        rm -f temp_line$$ #remove the temp_line file, so that it can be re-created in the next iteration
    done

    elif [[ "$1" == -c* ]]
    then 
# the following block takes the inputed file and changes all rows and cols
# and stores it in col_temp. In theory, I should now be able to use my rows
# algorithm to do the collumn stuff.
        touch col_temp$$ #new file that will have the 'user given' file have its rows and collumns flipped
        numc=$(($(head -n 1 "$file_path" | grep -o '	' | wc -l)+1)) #gets the total number of characters in the file 
        for ((i=1; i<="$numc"; i++)) 
           do
           temp_col="$(cut -d '	' -f "$i" "$file_path" | paste -s -d '	')" #temp_col holds what was a collumn as a row. Basically cuts the ith char from the file and pastes it as a row
           echo "$temp_col" >> col_temp$$ #append the row to col_temp
           done

        touch col_file$$ #This name is horrible, but this file holds the medians 
        touch row_file$$ #Again, horrible name, but  this file holds the averages 

        cat col_temp$$ | while read line #The collumn computation is pretty much the same as the row computation....
            do
            touch temp_line2$$ #File that will the current row of data seperated by spaces
            sum2=0; #holds the sum of items in the row
            count2=0 #hold the total number of items in a row
            for i in $line
                do 
                temp2=$i #holds the current character in the row 
                echo -n "$temp2 " >> temp_line2$$ #appends the current character to temp_line2 with a space at the end. Does not put a newline at the end
                sum2=`expr $sum2 + $i` #sums the characters in the row
	            count2=`expr $count2  + 1` #counts the number of characters in the row
            done
	
            middle2=`expr \( $count2 - 1 \) / 2` #finds the middle number
            middle2=`expr $middle2 + 2 - \( $count2 % 2 \)` #checks if number is even or odd, if odd add 1, if even add 2
 
            median2="$(cat temp_line2$$ | tr -s ' ' '\n' | sort -n | tr -s '\n' ' ' |  cut -f $middle2 -d ' ')" #cuts out the middle number of the sorted row
            average2=$((($sum2 + ($count2/2))/$count2)) #Calculates the average of the row by doing truncating integers division. This makes the rounding correct
	        echo -n "$median2	" >> col_file$$ #append the calculated median to the median file
            echo -n "$average2	" >> row_file$$ #append the calculated average the average file
            rm -f temp_line2$$	#remove temp_line2 so a new row can be appended to it next iteration 
         done

        echo "Averages:" #print the averages to the screen
        cat row_file$$
        echo ""
        echo "Medians:" #print the medians to the screen
        cat col_file$$
        echo ""
    else 
    echo -e "Incorrect format\n ./stats {-rows|-cols} [file]" >&2 #if the script makes it here, the format of the stats command must be wrong. Output error/usage message to stderr
    rm -f *$$ #remove temp files
    exit 1 #exit with status 1
fi

rm -f *$$ #remove all temp files

exit 0 #congrats! the scripts ran successfully, exit with status 0

















